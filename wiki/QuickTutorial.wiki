#summary FlexMonkey Tutorial.

= Running the Sample Application =

This tutorial will walk through the features of flexmonkey by using it to test a simple contact manager application. You can start the application now by clicking [http://keystone.gorillalogic.com/~sstern/MonkeyContacts.html# here]. ([Download] the source and binaries.)

The sample consists of the following components:

 * *!MonkeyContacts.mxml* - the source file for the Monkey Contact Application we'll be testing.
 * *!FlexUnitTests.mxml* - source code containing a test previously generated by flexmonkey.
 * *flexmonkey.swc* - the flexmonkey component library.

!MonkeyContacts.mxml contains no Flexmonkey-specific code. Any application can be tested with Flexmonkey without requiring any source code modifciations. However, we do need to link flexmonkey swc into our application's swf. The swf file included with the sample [download] already has flexmonkey linked in. (Learn [GettingStarted more] about configuring testing).

When you launch the !MonkeyExample.mxml application, its application window opens, and the FlexMonkey window opens automatically (Learn [GettingStarted more] about how Flexmonkey starts itself). You can move and resize the Flexmonkey window as necessary to work with the contact manager app beneath it.

= ScreenShot =

= Recording a Script =

Click the Record toggle button at the top of the screen. Now play around with the contact manager, which although primitive, offers a variety of UI gestures you can record. In addition to typing in the form, you can edit rows after they've been added to the grid, and the Phone Type field has a !ComboBox itemEditor. !Flexmonkey will faithfully record all UI events (many events such as mousemoves are filtered by default). Flexmonkey displays each recorded event as a command in the Command List. Clicking anywhere in the Flexmonkey window will stop recording.

= ScreenShot =

= Playing Back a Script =

Click the Play button on the Command List window. Each recorded action will be replayed. By default, Flexmonkey pauses for a half second between commands to give each UI action time to complete.

You can play subsets of commands from the list by selecting them in the grid and then hitting Run. If no rows are selected, Flexmonkey will play all the commands. 

= Generating a !FlexUnit Test =

Click on the FlexUnit TestCase tab to view the generated source code. Two methods are generated, the first calls !FlexMonkey.runCommands passing it an array of !FlexCommands generated from the Flexmonkey Command List. The second method contains a stub method where you would write actual validation code specific to what's being tested by the command sequence. You can copy and paste this code into a !FlexUnit !TestCase and add it to any !FlexUnit !TestSuite. 

= ScreenShot =

Two methods are generated, the first calls !FlexMonkey.runCommands passing it an array of !FlexCommands generated from the Flexmonkey *Command List*. The second method contains is a stub where you would write actual validation code specific to verifying the expected outcome of the script (as explained below). You can copy and paste this code into a !FlexUnit !TestCase and add it to any !FlexUnit !TestSuite. 

Click the *Show completeTestCase* checkbox and a complete !FlexUnit !TestCase will be generated.

= ScreenShot =

After you copy and paste the generated code into an !ActionScript source file and add testing validations, you can rebuild the app (including the Flexmonkey swc) and restart. The sample swf [download] already has a !FlexUnit test linked in, and its source can be found in the test.FlexUnitTests.as source file. You can run the test by clicking on the *!FlexUnit Runner*

Let's take a look at the source:

{{{
package test
{
	import com.gorillalogic.flexmonkey.FlexCommand;
	import com.gorillalogic.flexmonkey.FlexMonkey;
	import com.gorillalogic.flexmonkey.MonkeyEvent;
	import com.gorillalogic.flexmonkey.MonkeyUtils;
	
	import flash.display.DisplayObject;
	
	import flexunit.framework.Assert;
	import flexunit.framework.TestCase;
	
	import mx.collections.ArrayCollection;
	import mx.controls.DataGrid;


	[Mixin]
	public class FlexUnitTests extends TestCase
	{
      public static function init(root:DisplayObject) : void {
     	FlexMonkey.addTestSuite(FlexUnitTests);
	}
	// FlexUnit test method
	public function testSomething():void {
		FlexMonkey.theMonkey.addEventListener(MonkeyEvent.READY_FOR_VALIDATION, addAsync(verifySomething, 10000));
		FlexMonkey.runCommands([
			new FlexCommand("inName", "SelectText", ["0", "0"], "automationName"),
			new FlexCommand("inName", "Input", ["Fred"], "automationName"),
			new FlexCommand("inName", "ChangeFocus", [false, "TAB"], "automationName"),
			new FlexCommand("inType", "Open", ["null"], "automationName"),
			new FlexCommand("inType", "Select", ["Work", "1", "0"], "automationName"),
			new FlexCommand("inType", "Type", ["TAB", "0"], "automationName"),
			new FlexCommand("inType", "ChangeFocus", [false, "TAB"], "automationName"),
			new FlexCommand("inPhone", "Input", ["555 555 5555"], "automationName"),
			new FlexCommand("Add", "Click", ["0"], "automationName"),
			new FlexCommand("grid", "Select", ["Fred | *Work* | 555 555 5555", "1", "0"], "automationName"),
			new FlexCommand("grid", "Click", ["0"], "automationName")]);
	}
	// Called after commands have been run
	private function verifySomething(event:MonkeyEvent):void {
	   var comp:DataGrid = MonkeyUtils.findComponentWith("grid","id") as DataGrid;
	   Assert.assertEquals("Fred", ArrayCollection(comp.dataProvider).getItemAt(0).name);
	   Assert.assertEquals("Work", ArrayCollection(comp.dataProvider).getItemAt(0).type);		   
	}
 
}
}

}}}

We have to tell !FlexUnit that the test is asynchronous. After Flexmonkey completes running a command list, he dispatches a READY_FOR_VALIDATION event. We use !FlexUnit !TestCase's addAsync method to tell !FlexUnit that our READY_FOR_VALIDATION event handler's completion signals that the test has passed (unless of course one of our assertions fails). (Learn [http://www.adobe.com/cfusion/communityengine/index.cfm?event=showdetails&productId=2&postId=6882 more] about asynchrounous testing with !FlexUnit).

{{{
		FlexMonkey.theMonkey.addEventListener(MonkeyEvent.READY_FOR_VALIDATION, addAsync(verifySomething, 10000);
}}}
