<?xml version="1.0" encoding="utf-8"?>
<aggro:CollapsableTitleWindow title="Flex Monkey!" xmlns:aggro="de.aggro.components.*" xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="646" height="458" creationComplete="create()" >
	<mx:Script>
		<![CDATA[
			import com.flexspy.FlexSpy;
			import mx.collections.ArrayCollection;
		]]>
	</mx:Script>


	
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.messaging.FlexClient;
		import mx.controls.Image;
		import mx.events.FlexEvent;
		import com.gorillalogic.aqadaptor.AQAdapter;
		import mx.core.UIComponent;
		import mx.automation.Automation;
		import mx.automation.AutomationManager;
		import mx.automation.events.AutomationRecordEvent;
		import mx.collections.ArrayCollection;
		import mx.binding.utils.BindingUtils;
	
	    import mx.automation.IAutomationManager;
	    import mx.automation.IAutomationObject;
	    import mx.automation.AutomationID;
	    
	    [Bindable]
		public var commands:ArrayCollection = new ArrayCollection();
		
		/**
		 * Time to pause between command executions, in milliseconds. Defaults to 500.
		 */ 
		 [Bindable]
		public var thinkTime:int = 500;
		 
		
		public static var tester:FlexTester = new FlexTester();
		
		private static var theMonkey:FlexMonkey;
	
		private function create():void {
			theMonkey = this;
		}
	
		private function startRecording():void
		{
			
			Automation.automationManager.addEventListener(AutomationRecordEvent.RECORD, recordHandler, false, 0, true);
                                            
			AQAdapter.aqAdapter.beginRecording();
			btnRecord.enabled = false;
			btnStop.enabled = true;
			//tabs.selectedIndex = 0;
			//btnReplay.enabled = false;
		}
		
		private function recordHandler(event:AutomationRecordEvent):void {
			var id:String;
			var idProp:String;
			var obj:IAutomationObject = event.automationObject;
			if (obj.automationName != null && obj.automationName != "") {
				idProp = "automationName"
				id = obj.automationName;
			} else if (obj is UIComponent && UIComponent(obj).id != null && UIComponent(obj).id != "") {
				idProp = "id";
				id = UIComponent(obj).id;
			} else {
				idProp = "automationID";
				id = Automation.automationManager.createID(obj).toString();
			}
			
       		commands.addItem(new FlexCommand(id, event.name, event.args, idProp));

        }

		private function stopRecording():void
		{
			AQAdapter.aqAdapter.endRecording();
			//output.text = AQAdapter.aqAdapter.getRecords();
			invalidateSize();
			validateNow();
			btnRecord.enabled = true;
			//btnReplay.enabled = true;
		}
		
		private function showSource(event:FlexEvent):void {
			var cmds:Array = cmdGrid.selectedItems.reverse();
			if (cmds.length == 0) {
				cmds = ArrayCollection(cmdGrid.dataProvider).toArray();
			}
			
			source.text =
				"public static function testSomething():void {\n" +
				"  FlexMonkey.runCommands([\n";
			var first:Boolean = true;	
			for each (var cmd:FlexCommand in cmds) {
				if (first) {
					first = false;
				} else {
					source.text+=",\n";
				}
			
				source.text+=
				 	"      new FlexCommand(\"" + cmd.value + "\", \"" + cmd.command + "\"";
				 	source.text+=", [";

			 		source.text+=quote(cmd.args[0]);
			 		for each (var arg:String in cmd.args.slice(1)) {
			 			source.text+=", " + quote(arg); 
			 		}
 
				 	source.text+="]";
				 	
			 		if (cmd.prop) {
			 			source.text +=", \"" + cmd.prop + "\""
			 			if (cmd.containerValue) {
			 				source.text+=", \"" + cmd.containerValue + "\"";
			 				if (cmd.containerProp) {
			 					source.text+=", \"" + cmd.containerProp + "\"";
			 				}
			 			}
			 		}
			 		source.text+=")"

			}
			source.text+="   ],\n"; 
			source.text+=
				"   function():void {\n" +
				"      FlexMonkey.assert(true, \"Message...\");\n" +
				"      FlexMonkey.success();\n" +
				"   });" +
				"}";
				
				
		} 
		
		private static function quote(arg:Object):String {
			return arg is String ? "\"" + arg + "\"" : String(arg);
		}
		

		public static function runCommands(cmds:Array, validator:Function=null):void {	
						

			var runTimer:Timer = new Timer(theMonkey.thinkTime, 1);		
			var nextCmdIndex:int = 0;	

			runTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function():void {
				runTimer.delay = theMonkey.thinkTime;
				if (nextCmdIndex == cmds.length) {
					if (validator != null) {
						try {
							validator();
						} catch (error:AssertionFailed) {
							return;
						} catch (error:Error) {
							tester.error(error.getStackTrace());
						}
					}
					FlexMonkey.success();
					return;
				}
				
				var c:Object = cmds[nextCmdIndex];
				if (c is PauseCommand) {
					runTimer.delay = PauseCommand(c).delay;
					runTimer.start();
					nextCmdIndex++;
					return;
				}
				
				if (c is CallCommand) {
					CallCommand(c).func();
					nextCmdIndex++;
					runTimer.start();
					return;
				}
				
				var cmd:FlexCommand = c as FlexCommand;
				
				try {
					if (runCommand(cmd.value, cmd.command, cmd.args, cmd.prop, cmd.containerValue, cmd.containerProp)) {
						nextCmdIndex++;
					}
				} catch (error:Error) {
					Alert.show(error.message);
					nextCmdIndex++
				}
				runTimer.start();
				
			});
			runTimer.start();
		}
		
		
		
		private function runSelected(event:MouseEvent):void {
			var selectedCommands:Array = cmdGrid.selectedItems.reverse();
			if (selectedCommands.length == 0) {
				selectedCommands = ArrayCollection(cmdGrid.dataProvider).toArray();
			}	
			runCommands(selectedCommands);
		}
		
		private static function runCommand(value:String, command:String, args:Array, prop=null, containerValue:String=null, containerProp:String=null):Boolean {
			    var am:IAutomationManager = AQAdapter.aqAdapter.automationManager;
        	
				if (!am.isSynchronized(null)) {
					return false;
				}

				var container:UIComponent = null;
				if (containerValue != null) {
					container = MonkeyUtils.findComponentWith(containerValue, containerProp); 
				}

				var target:IAutomationObject = MonkeyUtils.findComponentWith(value, prop, container);
				if (!target) {
					throw new AssertionFailed("Unable to find component having " + prop + " = " + value);
				}

		        if (!target || !am.isSynchronized(target))
					return false;

	            if (!am.isVisible(target as DisplayObject))
					return false;

        	
	        	AQAdapter.aqAdapter.run(target, 
		        						command, 
		        						args);
//		        if (recordEnabled()) {					
//		        	ArrayCollection(theMonkey.cmdGrid.dataProvider).addItem(new FlexCommand(value, command, args, prop, containerValue, containerProp));
//		        }
				return true;
		}
		
		
		private static function recordEnabled():Boolean {
			return !theMonkey.btnRecord.enabled;
		}
		
		public static function findComponentWith(value:String, prop:String="automationName", container:UIComponent=null):UIComponent {
			return MonkeyUtils.findComponentWith(value, prop, container);
		}
		
		public static function addTest(func:Function, desc:String=null):void {
			tester.addTest(func, desc);
		}
		
		public static function assert(cond:Boolean, msg:String):void {
			tester.assert(cond, msg);
		}
		
		public static function assertEquals(expected:Object, actual:Object, msg:String=null):void {
			tester.assert(expected == actual, msg == null ? "Expected '" + expected + " but got '" + actual + "'" : msg);
		}
		
		public static function success():void {
			tester.success();
		}
		
		public static function runTests():void {
			var tests:Array;	
		
			if (theMonkey.testGrid.selectedItems.length > 0) {
				tests = theMonkey.testGrid.selectedItems.reverse();
			} else {
				tests = ArrayCollection(theMonkey.testGrid.dataProvider).toArray();
			}			
			tester.runTests(tests);
		}
		
		public function removeCommand(img:Image):void {
			commands.removeItemAt(img.listData.rowIndex);
		}
		
		
	]]>
</mx:Script>
	<mx:HBox>
		<mx:Button label="Record" click="startRecording()" id="btnRecord" />
		<mx:Button label="Stop"  mouseDown="stopRecording()" id="btnStop" enabled="false"/>
		<mx:Button id="btnFlexSpy" label="FlexSpy" click="FlexSpy.show()" />
	</mx:HBox>
	<mx:TabNavigator id="tabs" width="100%" height="100%" creationPolicy="all">

		<mx:VBox label="Command List" width="100%" height="100%">
			<mx:HRule width="100%"/>
			<mx:HBox>
				<mx:Button label="Run" click="runSelected(event)"/>
				<mx:Button label="Clear" click="commands.removeAll()"/>	
				<mx:CheckBox id="editEnabled" label="Enable editing"/>			
			</mx:HBox>		
			<mx:HRule width="100%"/>
			<mx:DataGrid editable="{editEnabled.selected}" id="cmdGrid" x="10" y="10" width="100%" height="100%" dataProvider="{commands}" allowMultipleSelection="true" allowDragSelection="true">
				<mx:columns>
					<mx:DataGridColumn headerText="" width="40" editable="false"/>
					<mx:DataGridColumn headerText="" width="20">
						<mx:itemRenderer>
							<mx:Component>
								<mx:Image source="@Embed(source='assets/delete.png')" click="outerDocument.removeCommand(this)"/>
							</mx:Component>
						</mx:itemRenderer>	
					</mx:DataGridColumn>								
					<mx:DataGridColumn headerText="Command" dataField="command" width="100"/>					
					<mx:DataGridColumn headerText="Value" dataField="value" width="100"/>
					<mx:DataGridColumn headerText="Property" dataField="prop" width="100"/>					
					<mx:DataGridColumn headerText="Arguments" dataField="args" width="200" editable="false">
						<mx:itemEditor>
							<mx:Component>
									<mx:TextArea text="{data.args.join('\n')}"/>
							</mx:Component>
						</mx:itemEditor>	
					</mx:DataGridColumn>						
					<mx:DataGridColumn headerText="Container Value" dataField="containerId" width="100"/>
					<mx:DataGridColumn headerText="Container Property" dataField="containerProp" width="100"/>										
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
		<mx:Canvas label="Source" width="100%" height="100%" show="showSource(event)">
			<mx:TextArea id="source"  width="100%" height="100%" x="0"/>
		</mx:Canvas>			
		<mx:VBox label="Tests">
			<mx:HRule width="100%"/>
			<mx:Button label="Run" click="runTests()"/>
			<mx:HRule width="100%"/>	
			<mx:DataGrid id="testGrid" x="10" y="10" width="100%" height="100%" dataProvider="{tester.tests}" allowMultipleSelection="true" allowDragSelection="true">
				<mx:columns>
					<mx:DataGridColumn headerText="" dataField="select" width="20"/>							
					<mx:DataGridColumn headerText="Test" dataField="desc"/>
					<mx:DataGridColumn headerText="Result" dataField="result"/>					
					<mx:DataGridColumn headerText="Messages" dataField="msg"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>		
	
	</mx:TabNavigator>

</aggro:CollapsableTitleWindow>
